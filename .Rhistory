sentences = tibble(text = twenty_newsgroup$text[400] %>%
unnest_tokens(sentence, text, token = 'sentence') %>%
mutate(id = row_number()) %>%
select(id, sentences))
words = sentences %>%
unnest_tokens(word, sentence)
article_summary = textrank_sentences(data = sentences, terminology = words)
article_summary[['sentence']] %>%
arrange(desc(textarank)) %>%
top_n(1) %>%
puu(sentences)
article_summary[['sentence']] %>%
arrange(desc(textarank)) %>%
top_n(1) %>%
pull(sentences)
library(tm)
library(deepnet)
corpus = Corpus(VectorSource(twenty_newsgroup$text))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctiation)
corpus = tm_map(corpus, removeWords, c('the', 'and'))
stopwords('english')
corpus = tm_map(corpus, removeWords, c('the', 'and', stopwords('english')))
corpus = tm_map(corpus, stripWhiteSpace)
news_dtm <- removeSparseTerms(news_dtm, 0.95)
split_ratio = floor(.75 * nrow(twenty_newsgroup))
set.seed(123)
train_index = sample(seq_len(nrow(twenty_newsgroup)), size = split_ratio)
train_x = news_dtm[train_index]
train_y = twenty_newsgroup$target[train_index]
test_x = news_dtm[-train_index,]
test_y = twenty_newsgroup$target[train_index]
rbm = rbm.train(x = as.matrix(train_x), hidden = 20, numepochs = 100)
test_latent_features = rbm.up(rbm, as.matrix(test_x))
mat[i, ] = c(x, y)
mat
gibbs(10, .75)
gibbs(10, .03)
spam_vs_ham = read.csv('spam.csv')
y = if_else(spam_vs_ham$v1 == 'spam', 1, 0)
x <- spam_vs_ham$v2 %>%
str_replace_all("[^a-zA-Z0-9/:-_]|\r|\n|\t", " ") %>%
str_replace_all("\b[a-zA-Z0-9/:-]{1,2}\b", " ") %>%
str_trim("both") %>%
str_squish()
corpus = Corpus(VectorSource(x))
dtm = DocumentTermMatrix(corpus)
split_ratio = floor(.75 = nrow(dtm))
set.seed(123)
train_index = sample(seq_len(nrow(dtm)), size = split_ratio)
train_x = dtm[train_index]
train_x = dtm[train_index,]
train_y = y[train_index]
test_x = dtm[train_index,]
test_x = dtm[-train_index,]
test_x = dtm[-train_index]
rbm1 <- rbm.train(x = as.matrix(train_x),hidden = 100,cd =
1,numepochs = 5)
rbm1$e[1:10]
rbm5$e[1:10]
rbm3$e[1:10]
rbm1$e[1:10]
train_latent_features = rbm.up(rbm1, as.matrix(train_x))
test_latent_features = rbm.up(rbm1, as.matrix(test_x))
dbn <- dbn.dnn.train(x = as.matrix(train_x), y = train_y, hidden =
c(100,50,10), cd = 1, numepochs = 5)
predictions = nn.predict(dbn, as.matrix(test_x))
pred_class = if_else(predictions > .3, 1, 0)
table(test_y, pred_class)
library(quantmod)
library(tseries)
library(ggplot2)
library(timeSeries)
library(forecast)
library(xts)
library(keras)
library(tensorflow)
FB = getSymbols('FB', from = '2014-01-01', to = '2018-12-31', source = 'google', auto.assign = FALSE)
FB[1:5,]
closing_prices = FB$FB.Close
plot.xts(closing_prices, main = 'Facebook Closing Stock Prices')
arima.mod = auto.arima(closing_prices)
forecasted_prices = forecast(arima.mod, h = 365)
autoplot(forecasted_prices)
fb_future = getSymbols('FB', from = '2019-01-01', to = '2019-12-31')
fb_future = getSymbols('FB', from = '2019-01-01', to = '2019-12-31', source = 'google', auto_assign = FALSE)
future_values = ts(data = fb_future$FB.close, start = 12588, end = 1509)
autoplot(forecasted_prices) + autolayer(future_values, series = 'Actual Closing Prices')
future_prices = fb_future$FB.Close
closing_deltas = diff(log(rbind(closing_prices, future_prices)), lag = 1)
closing_deltas = closing_deltas[!is.na(closing_deltas)]
plot(closing_deltas, type = '1', main = 'Facebook Daily Log Return')
adf.test(closing_deltas)
train_gen = timeseries_generator(
closing_deltas,
closing_deltas,
length = 3,
sampling_rate = 1,
stride = 1,
start_index = 1,
end_index = 1,
shuffle = FALSE,
reverse = FALSE,
batch_size = 1
)
test_gen = timeseries_generator(
closing_deltas,
closing_deltas,
length = 3,
sampling_rate = 1,
stride = 1,
start_index = 1259,
end_index = 1507,
shuffle = FALSE,
reverse = FALSE,
batch_size = 1
)
model = keras_model_sequential()
model %>%
layer_lstm(units = 4,
input_shape = c(3, 1)) %>%
layer_dense(units = 1)
model %>% compile(loss = 'mse', optimizer = 'adam')
model
history = model %>% fit_generator(
train_gen,
epochs = 100,
steps_per_epoch = 1,
verbose = 2
)
testpredict = predict_generator(model, test_gen, steps = 200)
trainpredict = predict_generator(model, train_gen, steps = 1200)
trainpredict = data.frame(pred = trainpredict)
rownames(trainpredict) = index(closing_deltas)[4:1203]
trainpredict = as.xts(trainpredict)
testpredict = data.frame(pred = testpredict)[1262:1461]
testpredict = as.xts(testpredict)
closing_deltas$trainpred = rep(NA, 1507)
closing_deltas$trainpred[4:1203] = trainpred$pred
plot(as.zoo(closing_deltas), las = 1, plot.type = 'single', col = c('light gray', 'black', black), lty = c(3, 11))
evaluate_generator(model, test_gen, steps = 2000)
evaluate_generator(model, train_gen, steps = 1200)
train_gen = timeseries_generator(
closing_deltas,
closing_deltas,
length = 10,
sampling_rate = 1,
stride = 1,
start_index = 1,
end_index = 1258,
shuffle = FALSE,
reverse = FALSE,
batch_size = 1
)
test_gen = timeseries_generator(
closing_deltas,
closing_deltas,
length = 10,
sampling_rate = 1,
stride = 1,
start_index =1259,
end_index = 1507,
shuffle = FALSE,
reverse = FALSE,
batch_size = 1
)
model = keras_model_sequential()
model %>%
layer_lstm(units = 256, input_shape = c(10, 1), return_sequences = 'True') %>%
layer_dropout(rate = .3) %>%
layer_lstm(units = 256, input_shape = c(10, 1), return_sequences = 'False') %>%
layer_dropout(rate = .3) %>%
layer_dense(units = 32, activation = 'relu') %>%
layer_dense(units = 1, activation = 'linear')
mmodel %>% compile(
optimizer = optimizer_adam(lr = .001),
loss = 'mse',
metrics = 'accuracy'
)
model
history = model %>% fit_generator(
train_gen,
epochs = 100,
steps_per_epoch = 1,
verbose = 2
)
evaluate_generator(model, test_gen, steps = 200)
library(ReinforcementLearning)
data('tictactoe')
library(ReinforcementLearning)
data('tictactoe')
head(tictactoe, 5)
View(tictactoe)
tictactoe %>% filter(Reward = 1) %>%
head()
head(tictactoe, 5) tictactoe %>% filter(Reward = 1) %>% head()
tictactoe %>% filter(Reward = 1) %>% head()
tictactoe %<% filter(Reward = 1) %<% head()
tictactoe %>% filter(Reward = -1) %>% head()
tictactoe %>% filter(State == 'XB. .X.XBB') %>%
distint()
State = '0.0'
Action = '4'
NextState = '4, 8'
Reward = 0
Reward = 0
Reward = '0'
numberscramble = tibble(
State = State,
Action = Action,
NextState = NextState,
Reward = Reward
)
numberscramble
library(hash)
Q = hash()
Q[[i]] = hash(unique(tictactoe$Action), rep(0, length(unique(tictactoe$Action))))
for (i in unique(tictactoe$State)[!unique(tictactoe$State) %in% names(Q)]){
Q[[i]] = hash(unique(tictactoe$Action), rep(0, length(unique(tictactoe$Action))))
}
control = list(
alpha = .1,
gamma = .1,
epsilon = .1
)
d = tictactoe[1, ]
state = d$State
Reward = d$State
Reward = d$Action
reward = d$Reward
nextState = d$NextState
currentQ = Q[[state]][[action]]
maxNextQ = 0
if(has.key(nextState, Q)){
maxNextQ = max(values(Q[[nextState]]))
}else{
maxNextQ = 0
}
# Bellman equation
Q[[state]][[action]] = currentQ + control$alpha * (reward + control$gamma * maxNextQ - currentQ)
q_value = Q[[tictactoe$State[1]]][[tictactoe$Action[1]]]
## Bellman equation
Q[[state]][[action]] = currentQ + control$alpha * (reward + control$gamma * maxNextQ - currentQ)
for (i in 1:nrow(tictactoe)) {
d = tictactoe[i, ]
state = d$State
action = d$Action
reward = d$Reward
nextState = d$NextState
currentQ = Q[[state]][[action]]
if (has.key(nextState, Q)){
maxNextQ = max(values(Q[[nextState]]))
}else{
maxNextQ = 0
}
## Bellman equation
Q[[state]][[action]] = currentQ + control$alpha * (reward + control$gamma * maxNextQ - currentQ)
}
Q[[tictactoe$State[234543]]][[tictactoe$Action[234543]]]
## Bellman equation
Q[[state]][[action]] <- currentQ + control$alpha *
(reward + control$gamma * maxNextQ - currentQ)
Q[[tictactoe$State[234543]]][[tictactoe$Action[234543]]]
d <- tictactoe[i, ]
Q[[tictactoe$State[234543]]][[tictactoe$Action[234543]]]
model = ReinforcementLearning(data = tictactoe,
s = 'State',
a = 'Action',
r = 'Reward',
s_new = 'NextState',
iter = 5,
control = control)
model$Q_hash[[tictactoe$State[234543]]][[tictactoe$Action[234543]]]
sort(model$Q['...........', 1:9], decreasing = TRUE)
model$Policy['...........']
dinnerList = list(
'Vegetables' = c("Potatos", "Cabage", "Carrots"),
'Dessert' = c("Ice cream", "Aple pie"),
'Drinks' = c(250, 330, 500)
)
dinnerList = list(
'Vegetables' = c("Potatos", "Cabage", "Carrots"),
'Dessert' = c("Ice cream", "Aple pie"),
'Drinks' = c(250, 330, 500)
)
dinnerList[1:2]
dinnerList[[3]]
dinnerList['Drinks']
library(ggplot2)
install.packages(shyni)
install.packages(shiny)
install.packages("shiny")
library(shiny)
runExample("01_Hello")
runExample('08_html')
getwd()
setwd("C:/Users/Usuario/Documents/Shiny")
setwd("C:/Users/Usuario/Documents/Shiny/")
getwd()
library(shiny)
getwd()
shiny::runApp()
library(shiny)
runApp()
shinyUI(fluidPage(
titlePanel(title = "This is my first shiny app"),
sidebarLayout(
sidebarPanel("This is side panel"),
mainPanel("This is the main panel text, output is displayed here")
)
)
)
runApp()
getwd()
getwd()
getwd("C:/Users/Usuario/Documents/shiny/")
getwd("C:/Users/Usuario/Documents/shiny")
getwd()
shiny::runApp('shiny')
getwd()
runApp('shiny')
runApp('shiny')
runApp("C:/Users/Usuario/Documents/shiny/")
runApp("C:/Users/Usuario/Documents/")
runApp("C:/Users/Usuario/Documents/shiny/")
runApp('shiny')
?renderPlot
runApp('shiny')
runApp()
runApp('shiny')
runApp()
runApp("C:/Users/Usuario/Documents/shiny/")
runApp('shiny')
?renderText
?renderPlot
runApp('shiny')
runApp()
runApp("C:/Users/Usuario/Documents/shiny/")
runGist(6571951)
library(plyr)
library(shiny)
library(plyr)
library(ggplot2)
load("analytics.Rdata")
library(devtools)
install_github("rga", "skardhamar")
install_github("rga", "skardhamar")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install_github("rga", "skardhamar")
library(devtools)
install_github("rga", "skardhamar")
install.packages(Rtools)
install.packages("Rtools")
install.Rtools()
install.Rtools(TRUE)
shiny::runApp()
library(shiny)
runApp()
runApp()
?radioButtons
runApp()
run_examples("01_hello")
runExample("01_hello")
runExample()
runExample(09_upload)
runExample("09_upload")
runExample("04_mpg")
shiny::runApp()
runApp()
shiny::runApp('shiny')
runApp()
runApp('shiny')
runApp('shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(shiny)
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
?hist
runApp()
shiny::runApp()
runApp()
shiny::runApp()
?renderPrint
?str
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp('GitHub/HCE')
runApp()
runApp()
library(shiny)
?titlePanel
?downloadButton
?radioButtons
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
output$downloadData = downloadHandler(
# This function returns a string which tells the client
# browser what name to use when saving the file
filename = function(){
paste(input$dataset, fileext(), sep = '.') # Sample: iris.csv, iris.doc, iris.txt
},
# This function should write data to a file given to it by
# the argumetn 'file'
content = function(file){
sep = switch (input$type,
'Excel (CSV)' = ',', 'Text (TSV)' = '\t', 'Text (Space Separated)' = ' ', 'Doc' = ' ')
# Write to a file specified by the 'file' argument
write.table(datasetInput(), file, sep = sep, row.name = FALSE)
}
)
shinyUI(fluidPage(
titlePanel(h4("Demostration of file download using downloadbutton() and downloadHandler()",
align = 'center')),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = 'dataset',
label = 'Select the dataset',
choices = c('iris', 'mtcars', 'trees')
),
br(),
helpText("Select the download format"),
radioButtons(
inputId = 'type',
label = 'Format type',
choices = c('Excel (CSV)', 'Text (TSV)', 'Text (Space Separated)', 'Doc')
),
br(),
helpText('Click on the download button to download the dataset observatons'),
downloadButton(
outputId = 'downloadData',
label = 'Download'),
textInput(inputId = 'testText',
label = 'Example'),
numericInput(inputId = 'idcard', #Cedula
label = 'Cedula Ciudadana',
value = "")
),
mainPanel(
tableOutput('table')
)
)
))
runApp('shiny')
runApp()
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp()
runApp('shiny')
runApp()
runApp()
runApp('shiny')
runApp()
runApp('shiny')
runApp()
runApp('shiny')
runApp()
runApp('shiny')
runApp('~')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp('GitHub/HCE')
installed.packages('shinyWidgets')
installed.packages('shinyWidgets')
install.packages("shinyWidgets")
library(shiny)
library(shinyWidgets)
library(shinydashboard)
install.packages('shinydashboard')
install.packages('shinydashboardPlus')
runApp('GitHub/HCE')
runApp('GitHub/HCE')
?textInput
runApp('GitHub/HCE')
